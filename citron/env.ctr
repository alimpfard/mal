# File env.ctr
var Env is Object cnew: {
     genAccessors: ['outer', 'data'].
     on: 'toString' do: {
        ^'{%s}' % [my data].
      }.
     on: 'new:' do: {:outer
        ^Env new: outer binds: Map new exprs: Map new.
      }.
     on: 'new:binds:exprs:' do: {:outer:binds:exprs
        var env is Env new.
        env init: outer binds: binds exprs: exprs.
        ^env.
      }.
     on: 'init:binds:exprs:' do: {:self:env:binds:exprs
         data: Map new.
         outer: env.
        0 to: binds count step: 1 do: {:i
            binds @ i = '&' ifTrue: {
                var rest is exprs viewFrom: i, copy.
                self set: (binds at: i + 1) to: (MALList new: rest).
                True break.
              }
                ifFalse: {
                self set: (binds at: i) to: (exprs @ i).
              }.
          }.
      }.
     on: 'set:to:' do: {:key:value
        my data put: value at: key.
      }.
     on: 'find:' do: {:self:key
        ^my data at: key,
         or: {
            self outer isNil ifTrue: {
                ^Nil.
              } ifFalse: {
                ^self outer find: key.
              }.
          }.
      }.
     on: 'search:do:' do: {:pat:blk
        my data each: {:key
            key lower startsWith: pat lower, ifTrue: {
                blk[key].
            }.
        }.
     }.
     on: 'get:' do: {:key
        var value is  find: key.
        value isNil ifTrue: {
            thisBlock error: (MALUnknownSymbol new: key).
          }.
        ^value.
      }.
  }.
